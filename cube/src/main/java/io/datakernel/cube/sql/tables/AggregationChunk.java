/*
 * Copyright (C) 2015 SoftIndex LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class is generated by jOOQ
 */
package io.datakernel.cube.sql.tables;

import io.datakernel.cube.sql.DefaultSchema;
import io.datakernel.cube.sql.Keys;
import io.datakernel.cube.sql.tables.records.AggregationChunkRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.6.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AggregationChunk extends TableImpl<AggregationChunkRecord> {

	private static final long serialVersionUID = -1422607465;

	/**
	 * The reference instance of <code>aggregation_chunk</code>
	 */
	public static final AggregationChunk AGGREGATION_CHUNK = new AggregationChunk();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AggregationChunkRecord> getRecordType() {
		return AggregationChunkRecord.class;
	}

	/**
	 * The column <code>aggregation_chunk.id</code>.
	 */
	public final TableField<AggregationChunkRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>aggregation_chunk.created</code>.
	 */
	public final TableField<AggregationChunkRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>aggregation_chunk.aggregation_id</code>.
	 */
	public final TableField<AggregationChunkRecord, String> AGGREGATION_ID = createField("aggregation_id", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>aggregation_chunk.revision_id</code>.
	 */
	public final TableField<AggregationChunkRecord, Integer> REVISION_ID = createField("revision_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>aggregation_chunk.min_revision_id</code>.
	 */
	public final TableField<AggregationChunkRecord, Integer> MIN_REVISION_ID = createField("min_revision_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>aggregation_chunk.max_revision_id</code>.
	 */
	public final TableField<AggregationChunkRecord, Integer> MAX_REVISION_ID = createField("max_revision_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>aggregation_chunk.count</code>.
	 */
	public final TableField<AggregationChunkRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>aggregation_chunk.consolidated_revision_id</code>.
	 */
	public final TableField<AggregationChunkRecord, Integer> CONSOLIDATED_REVISION_ID = createField("consolidated_revision_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>aggregation_chunk.consolidation_started</code>.
	 */
	public final TableField<AggregationChunkRecord, Timestamp> CONSOLIDATION_STARTED = createField("consolidation_started", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>aggregation_chunk.consolidation_completed</code>.
	 */
	public final TableField<AggregationChunkRecord, Timestamp> CONSOLIDATION_COMPLETED = createField("consolidation_completed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>aggregation_chunk.dimensions</code>.
	 */
	public final TableField<AggregationChunkRecord, String> DIMENSIONS = createField("dimensions", org.jooq.impl.SQLDataType.VARCHAR.length(1000).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>aggregation_chunk.metrics</code>.
	 */
	public final TableField<AggregationChunkRecord, String> METRICS = createField("metrics", org.jooq.impl.SQLDataType.VARCHAR.length(1000).nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>aggregation_chunk</code> table reference
	 */
	public AggregationChunk() {
		this("aggregation_chunk", null);
	}

	/**
	 * Create an aliased <code>aggregation_chunk</code> table reference
	 */
	public AggregationChunk(String alias) {
		this(alias, AGGREGATION_CHUNK);
	}

	private AggregationChunk(String alias, Table<AggregationChunkRecord> aliased) {
		this(alias, aliased, null);
	}

	private AggregationChunk(String alias, Table<AggregationChunkRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AggregationChunkRecord, Long> getIdentity() {
		return Keys.IDENTITY_AGGREGATION_CHUNK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AggregationChunkRecord> getPrimaryKey() {
		return Keys.KEY_AGGREGATION_CHUNK_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AggregationChunkRecord>> getKeys() {
		return Arrays.<UniqueKey<AggregationChunkRecord>>asList(Keys.KEY_AGGREGATION_CHUNK_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AggregationChunk as(String alias) {
		return new AggregationChunk(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AggregationChunk rename(String name) {
		return new AggregationChunk(name, null);
	}
}
