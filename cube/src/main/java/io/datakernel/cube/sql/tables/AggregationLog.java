/*
 * Copyright (C) 2015 SoftIndex LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class is generated by jOOQ
 */
package io.datakernel.cube.sql.tables;

import io.datakernel.cube.sql.DefaultSchema;
import io.datakernel.cube.sql.Keys;
import io.datakernel.cube.sql.tables.records.AggregationLogRecord;
import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.6.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AggregationLog extends TableImpl<AggregationLogRecord> {

	private static final long serialVersionUID = 25358605;

	/**
	 * The reference instance of <code>aggregation_log</code>
	 */
	public static final AggregationLog AGGREGATION_LOG = new AggregationLog();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AggregationLogRecord> getRecordType() {
		return AggregationLogRecord.class;
	}

	/**
	 * The column <code>aggregation_log.log</code>.
	 */
	public final TableField<AggregationLogRecord, String> LOG = createField("log", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>aggregation_log.partition</code>.
	 */
	public final TableField<AggregationLogRecord, String> PARTITION = createField("partition", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>aggregation_log.file</code>.
	 */
	public final TableField<AggregationLogRecord, String> FILE = createField("file", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>aggregation_log.file_index</code>.
	 */
	public final TableField<AggregationLogRecord, Integer> FILE_INDEX = createField("file_index", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>aggregation_log.position</code>.
	 */
	public final TableField<AggregationLogRecord, Long> POSITION = createField("position", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>aggregation_log</code> table reference
	 */
	public AggregationLog() {
		this("aggregation_log", null);
	}

	/**
	 * Create an aliased <code>aggregation_log</code> table reference
	 */
	public AggregationLog(String alias) {
		this(alias, AGGREGATION_LOG);
	}

	private AggregationLog(String alias, Table<AggregationLogRecord> aliased) {
		this(alias, aliased, null);
	}

	private AggregationLog(String alias, Table<AggregationLogRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AggregationLogRecord> getPrimaryKey() {
		return Keys.KEY_AGGREGATION_LOG_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AggregationLogRecord>> getKeys() {
		return Arrays.<UniqueKey<AggregationLogRecord>>asList(Keys.KEY_AGGREGATION_LOG_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AggregationLog as(String alias) {
		return new AggregationLog(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AggregationLog rename(String name) {
		return new AggregationLog(name, null);
	}
}
