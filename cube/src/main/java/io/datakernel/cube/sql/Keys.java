/*
 * Copyright (C) 2015 SoftIndex LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class is generated by jOOQ
 */
package io.datakernel.cube.sql;

import io.datakernel.cube.sql.tables.AggregationChunk;
import io.datakernel.cube.sql.tables.AggregationLog;
import io.datakernel.cube.sql.tables.AggregationRevision;
import io.datakernel.cube.sql.tables.AggregationStructure;
import io.datakernel.cube.sql.tables.records.AggregationChunkRecord;
import io.datakernel.cube.sql.tables.records.AggregationLogRecord;
import io.datakernel.cube.sql.tables.records.AggregationRevisionRecord;
import io.datakernel.cube.sql.tables.records.AggregationStructureRecord;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import javax.annotation.Generated;

/**
 * A class modelling foreign key relationships between tables of the <code></code>
 * schema
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.6.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<AggregationChunkRecord, Long> IDENTITY_AGGREGATION_CHUNK = Identities0.IDENTITY_AGGREGATION_CHUNK;
	public static final Identity<AggregationRevisionRecord, Integer> IDENTITY_AGGREGATION_REVISION = Identities0.IDENTITY_AGGREGATION_REVISION;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AggregationChunkRecord> KEY_AGGREGATION_CHUNK_PRIMARY = UniqueKeys0.KEY_AGGREGATION_CHUNK_PRIMARY;
	public static final UniqueKey<AggregationLogRecord> KEY_AGGREGATION_LOG_PRIMARY = UniqueKeys0.KEY_AGGREGATION_LOG_PRIMARY;
	public static final UniqueKey<AggregationRevisionRecord> KEY_AGGREGATION_REVISION_PRIMARY = UniqueKeys0.KEY_AGGREGATION_REVISION_PRIMARY;
	public static final UniqueKey<AggregationStructureRecord> KEY_AGGREGATION_STRUCTURE_PRIMARY = UniqueKeys0.KEY_AGGREGATION_STRUCTURE_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<AggregationChunkRecord, Long> IDENTITY_AGGREGATION_CHUNK = createIdentity(AggregationChunk.AGGREGATION_CHUNK, AggregationChunk.AGGREGATION_CHUNK.ID);
		public static Identity<AggregationRevisionRecord, Integer> IDENTITY_AGGREGATION_REVISION = createIdentity(AggregationRevision.AGGREGATION_REVISION, AggregationRevision.AGGREGATION_REVISION.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AggregationChunkRecord> KEY_AGGREGATION_CHUNK_PRIMARY = createUniqueKey(AggregationChunk.AGGREGATION_CHUNK, AggregationChunk.AGGREGATION_CHUNK.ID);
		public static final UniqueKey<AggregationLogRecord> KEY_AGGREGATION_LOG_PRIMARY = createUniqueKey(AggregationLog.AGGREGATION_LOG, AggregationLog.AGGREGATION_LOG.LOG, AggregationLog.AGGREGATION_LOG.PARTITION);
		public static final UniqueKey<AggregationRevisionRecord> KEY_AGGREGATION_REVISION_PRIMARY = createUniqueKey(AggregationRevision.AGGREGATION_REVISION, AggregationRevision.AGGREGATION_REVISION.ID);
		public static final UniqueKey<AggregationStructureRecord> KEY_AGGREGATION_STRUCTURE_PRIMARY = createUniqueKey(AggregationStructure.AGGREGATION_STRUCTURE, AggregationStructure.AGGREGATION_STRUCTURE.ID);
	}
}
